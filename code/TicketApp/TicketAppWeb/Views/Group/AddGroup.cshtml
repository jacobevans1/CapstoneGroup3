@model TicketAppWeb.Models.ViewModels.AddGroupViewModel

@{
    ViewData["Title"] = "Add New Group";
}

<!-- Google Font -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bubblegum+Sans&display=swap" rel="stylesheet">

<!-- Link to CSS -->
<link href="~/css/projectmanagement.css" rel="stylesheet" />

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2 class="text-center">Add New Group</h2>
            <div class="title-divider"></div>
        </div>
    </div>

    <!-- Validation Errors -->
    <div asp-validation-summary="All" class="text-danger text-center"></div>

    <form asp-action="CreateGroup" method="post" class="styled-form">
        <div class="form-group">
            <label asp-for="GroupName" class="form-label">Group Name <span class="text-danger">*</span></label>
            <input asp-for="GroupName" class="form-control" required />
            <span asp-validation-for="GroupName" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Description" class="form-label">Description</label>
            <textarea asp-for="Description" class="form-control" required></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="row">
            <!-- Available Users -->
            <div class="col-md-6">
                <h6>Available Users</h6>
                <ul id="availableUsers" class="list-group">
                    @foreach (var user in Model.AllUsers)
                    {
                        <li class="list-group-item">
                            <input type="checkbox" class="user-checkbox form-check-input mt-0" name="SelectedUserIds" value="@user.Id" />
                            @user.UserName (@user.Email)
                        </li>
                    }
                </ul>
            </div>

            <!-- Selected Members -->
            <div class="col-md-6">
                <h6>Selected Members <span class="text-danger">*</span></h6>
                <ul id="selectedUsers" class="list-group">
                    <!-- Selected users will appear here dynamically -->
                </ul>
            </div>
        </div>

        <!-- Group Lead Selection -->
        <div class="form-group mt-3">
            <label class="form-label">Group Lead <span class="text-danger">*</span></label>
            <select asp-for="GroupLeadId" class="form-select" id="groupLeadDropdown">
                <option value="">Select Group Lead</option>
                <input type="hidden" id="hiddenGroupLeadId" name="GroupLeadId" />
            </select>
            <span asp-validation-for="GroupLeadId" class="text-danger"></span>
        </div>

        <br />
        <div class="row justify-content-center">
            <div class="col-auto">
                <button type="submit" class="btn btn-primary">Create Group</button>
            </div>
            <div class="col-auto">
                <a asp-action="Index" asp-controller="Group" class="btn btn-secondary">Cancel</a>
            </div>
        </div>
    </form>
</div>

@section scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const availableUsers = document.getElementById("availableUsers");
            const selectedUsers = document.getElementById("selectedUsers");
            const groupLeadSelect = document.getElementById("groupLeadDropdown");

            // Function to update the Group Lead dropdown
            function updateGroupLeadDropdown() {
                groupLeadSelect.innerHTML = '<option value="">Select Group Lead</option>';

                let selectedUserIds = Array.from(selectedUsers.querySelectorAll(".user-checkbox"))
                    .map(item => item.value);

                if (selectedUserIds.length === 0) return;

                selectedUserIds.forEach(userId => {
                    let userText = document.querySelector(`input[value="${userId}"]`).parentNode.textContent.trim();
                    let option = document.createElement("option");
                    option.value = userId;
                    option.textContent = userText;
                    groupLeadSelect.appendChild(option);
                });

                // Ensure the selected lead is still in the list
                let selectedLead = groupLeadSelect.getAttribute("data-selected");
                if (selectedLead && !selectedUserIds.includes(selectedLead)) {
                    groupLeadSelect.value = "";
                    document.getElementById("hiddenGroupLeadId").value = "";
                }
            }

            // Function to sync user selections between Available and Selected lists
            function syncUserSelection(event) {
                let checkbox = event.target;
                let userId = checkbox.value;
                let userText = checkbox.parentNode.textContent.trim();

                if (checkbox.checked) {
                    // Move user to selected list
                    let listItem = document.createElement("li");
                    listItem.className = "list-group-item";
                    listItem.innerHTML = `
                                        <input type="checkbox" class="user-checkbox form-check-input mt-0" name="SelectedUserIds" value="${userId}" checked />
                                ${userText}
                            `;
                    selectedUsers.appendChild(listItem);

                    // Add deselect event
                    listItem.querySelector(".user-checkbox").addEventListener("change", function () {
                        if (!this.checked) {
                            removeUser(userId);
                        }
                    });

                } else {
                    // Remove user from selected list
                    removeUser(userId);
                }

                updateGroupLeadDropdown();
            }

            // Function to remove user from both lists when deselected
            function removeUser(userId) {
                let availableCheckbox = availableUsers.querySelector(`input[value="${userId}"]`);
                let selectedCheckbox = selectedUsers.querySelector(`input[value="${userId}"]`);

                if (availableCheckbox) {
                    availableCheckbox.checked = false;
                }
                if (selectedCheckbox) {
                    selectedCheckbox.parentNode.remove();
                }

                updateGroupLeadDropdown();
            }

            // Attach event listeners to all checkboxes
            availableUsers.addEventListener("change", function (event) {
                if (event.target.classList.contains("user-checkbox")) {
                    syncUserSelection(event);
                }
            });

            // Ensure group lead selection persists
            groupLeadSelect.addEventListener("change", function () {
                document.getElementById("hiddenGroupLeadId").value = this.value;
                groupLeadSelect.setAttribute("data-selected", this.value);
            });
        });
    </script>
}
