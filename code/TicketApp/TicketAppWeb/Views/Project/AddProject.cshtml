@model ProjectViewModel
@{
    ViewData["Title"] = "Add New Project";
}

<!-- Google Font for Bubblegum Sans -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bubblegum+Sans&display=swap" rel="stylesheet">

<!-- Link to CSS -->
<link href="~/css/projectmanagement.css" rel="stylesheet" />

<div class="container">
    <!-- TempData variables -->
    @{
        var successMessage = TempData["SuccessMessage"] as string;
        var errorMessage = TempData["ErrorMessage"] as string;
    }

    <!-- Display success messages if any -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">
            @successMessage
        </div>
    }

    <!-- Display error messages if any -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    <div class="row">
        <div class="col-md-12">
            <h2 class="text-center">Add New Project</h2>
            <div class="title-divider"></div>
        </div>
    </div>

    <form asp-action="CreatProject" method="post" class="styled-form">
        <div class="form-group">
            <label asp-for="ProjectName" class="form-label">Project Name <span class="text-danger">*</span></label>
            <input asp-for="ProjectName" class="form-control" />
            <span asp-validation-for="ProjectName" class="text-danger"></span>
        </div>
        <br />
        <div class="form-group">
            <label asp-for="Description" class="form-label">Description</label>
            <textarea asp-for="Description" class="form-control"></textarea>
        </div>
        <br />
        <div class="row ProjectLeadId">
            <div class="col-md-6">
                <h6>Available Groups</h6>
                <ul id="availableGroups" class="list-group">
                    @foreach (var group in Model.AvailableGroups)
                    {
                        <li class="list-group-item">
                            <input type="checkbox" class="group-checkbox form-check-input mt-0" name="SelectedGroupIds" value="@group.Id" />
                            @group.GroupName
                        </li>
                    }
                </ul>
            </div>

            <div class="col-md-6">
                <h6>Assigned Groups <span class="text-danger">*</span></h6>
                <ul id="assignedGroups" class="list-group">
                    @foreach (var group in Model.AssignedGroups)
                    {
                        <li class="list-group-item">
                            <input type="checkbox" class="group-checkbox form-check-input mt-0" name="SelectedGroupIds" value="@group.Id" checked />
                            @group.GroupName
                        </li>
                    }
                </ul>
            </div>
            <span asp-validation-for="SelectedGroupIds" class="text-danger"></span>
        </div>
        <br/>
        <div class="form-group mt-3">
            <label class="form-label">Project Lead <span class="text-danger">*</span></label>
            <select id="projectLead" asp-for="ProjectLeadId" class="form-select">
                <option value="">Select a Lead</option>
                <input type="hidden" id="hiddenProjectLeadId" name="ProjectLeadId" />
            </select>
            <span asp-validation-for="ProjectLeadId" class="text-danger"></span>
        </div>
        <br />
        <div class="row justify-content-center">
            <div class="col-auto">
                <button type="submit" class="btn btn-primary">Update Project</button>
            </div>
            <div class="col-auto">
                <div style="width: 150px">
                    <a asp-action="Index" asp-controller="Project" class="btn btn-secondary" style="width: 100%">Cancel</a>
                </div>
            </div>
        </div>
    </form>
</div>

@section scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const availableGroups = document.getElementById("availableGroups");
            const assignedGroups = document.getElementById("assignedGroups");
            const projectLeadSelect = document.getElementById("projectLead");

            function createAssignedGroupItem(groupId, groupName) {
                let listItem = document.createElement("li");
                listItem.className = "list-group-item";
                listItem.innerHTML = `
                        <input type="checkbox" class="assigned-group-checkbox" value="${groupId}" checked />
                        ${groupName}
                    `;
                assignedGroups.appendChild(listItem);

                // Add event listener to remove from assigned groups when unchecked
                listItem.querySelector(".assigned-group-checkbox").addEventListener("change", function () {
                    if (!this.checked) {
                        assignedGroups.removeChild(listItem);
                        // Uncheck the corresponding checkbox in available groups
                        let availableCheckbox = availableGroups.querySelector(`input[value="${groupId}"]`);
                        if (availableCheckbox) {
                            availableCheckbox.checked = false;
                        }
                        updateProjectLeads();
                    }
                });
            }

            availableGroups.addEventListener("change", function (event) {
                if (event.target.classList.contains("group-checkbox")) {
                    let groupId = event.target.value;
                    let groupName = event.target.parentNode.textContent.trim();

                    if (event.target.checked) {
                        createAssignedGroupItem(groupId, groupName);
                    } else {
                        // Remove from assigned groups
                        let assignedCheckbox = assignedGroups.querySelector(`input[value="${groupId}"]`);
                        if (assignedCheckbox) {
                            assignedGroups.removeChild(assignedCheckbox.parentNode);
                        }
                    }
                    updateProjectLeads();
                }
            });

            function updateProjectLeads() {
                projectLeadSelect.innerHTML = '<option value="">Select a Lead</option>';
                let selectedGroupIds = Array.from(assignedGroups.querySelectorAll(".assigned-group-checkbox"))
                    .map(item => item.value);

                if (selectedGroupIds.length === 0) {
                    return;
                }

                fetch(`/Project/GetGroupLeads?groupIds=${selectedGroupIds.join(',')}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.length === 0) {
                            console.warn("No leads found for the selected groups.");
                        }

                        data.forEach(lead => {
                            let option = document.createElement("option");
                            option.value = lead.id;
                            option.textContent = lead.fullName;
                            projectLeadSelect.appendChild(option);
                        });
                    })
                    .catch(error => console.error("Error fetching leads:", error));
            }

            document.getElementById("projectLead").addEventListener("change", function () {
                document.getElementById("hiddenProjectLeadId").value = this.value;
            });


        });
    </script>
}
