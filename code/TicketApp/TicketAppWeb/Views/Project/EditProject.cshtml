@*
    The edit project functionality
    Jabesi Abwe
    03/?/2025
*@
@model ProjectViewModel
@{
    ViewData["Title"] = "Edit Project";
}

<!-- Google Font for Bubblegum Sans -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bubblegum+Sans&display=swap" rel="stylesheet">

<!-- Link to CSS -->
<link href="~/css/projectmanagement.css" rel="stylesheet" />

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2 class="text-center">Edit Project</h2>
            <div class="title-divider"></div>
        </div>
    </div>

    @if (Model.LeadChangeRequired)
    {
        <div class="alert alert-warning">
            <strong>Action Required:</strong> You must select a new project lead before proceeding.
        </div>
    }

    <form asp-action="EditProject" method="post" class="styled-form" id="projectForm">
        <input type="hidden" name="id" value="@ViewContext.RouteData.Values["id"]" />

        <div class="form-group">
            <label asp-for="ProjectName" class="form-label">Project Name <span class="text-danger">*</span></label>
            <input asp-for="ProjectName" class="form-control" />
            <span asp-validation-for="ProjectName" class="text-danger"></span>
        </div>
        <br />
        <div class="form-group">
            <label asp-for="Description" class="form-label">Description</label>
            <textarea asp-for="Description" class="form-control"></textarea>
        </div>
        <br />

        <div class="row">
            <div class="col-md-5">
                <h6>Available Groups</h6>
                <ul id="availableGroups" class="list-group">
                    @foreach (var group in Model.AvailableGroups)
                    {
                        if (!Model.SelectedGroupIds.Contains(group.Id))
                        {
                            <li class="list-group-item">
                                <input type="checkbox" class="group-checkbox form-check-input mt-0" value="@group.Id" />
                                @group.GroupName
                            </li>
                        }
                    }
                </ul>
            </div>

            <div class="col-md-2 text-center align-self-center">
                <button type="button" class="btn btn-primary mb-2" id="addGroupsBtn">Add →</button>
                <br /><br />
                <button type="button" class="btn btn-danger" id="removeGroupsBtn">← Remove</button>
            </div>

            <div class="col-md-5">
                <h6>Assigned Groups <span class="text-danger">*</span></h6>
                <ul id="assignedGroups" class="list-group">
                    @foreach (var group in Model.AvailableGroups)
                    {
                        if (Model.SelectedGroupIds.Contains(group.Id))
                        {
                            <li class="list-group-item">
                                <input type="checkbox" class="assigned-group-checkbox form-check-input mt-0" name="SelectedGroupIds" value="@group.Id" checked />
                                @group.GroupName
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
        <span asp-validation-for="SelectedGroupIds" class="text-danger"></span>
        <br />

        <div class="form-group mt-3">
            <label class="form-label">Project Lead <span class="text-danger">*</span></label>
            <select id="projectLead" asp-for="ProjectLeadId" class="form-select">
                <option value="">Select a Lead</option>
                @foreach (var lead in Model.AvailableGroupLeads)
                {
                    <option value="@lead.Id" selected="@(Model.ProjectLeadId == lead.Id ? "selected" : null)">
                        @lead.FullName
                    </option>
                }
            </select>
            <input type="hidden" id="hiddenProjectLeadId" name="ProjectLeadId" value="@Model.ProjectLeadId" />
            <span asp-validation-for="ProjectLeadId" class="text-danger"></span>
        </div>
        <input type="hidden" id="LeadChangeRequired" name="LeadChangeRequired" value="@Model.LeadChangeRequired.ToString().ToLower()" />

        <br />
        <div class="row justify-content-center">
            <div class="col-auto">
                <button type="submit" class="btn btn-primary">Update Project</button>
            </div>
            <div class="col-auto">
                <div style="width: 150px">
                    <a asp-action="Index" asp-controller="Project" class="btn btn-secondary" style="width: 100%">Cancel</a>
                </div>
            </div>
        </div>
    </form>
</div>

@section scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const availableGroups = document.getElementById("availableGroups");
            const assignedGroups = document.getElementById("assignedGroups");
            const projectLeadSelect = document.getElementById("projectLead");

            document.getElementById("addGroupsBtn").addEventListener("click", function () {
                moveSelectedGroups(availableGroups, assignedGroups, true);
            });

            document.getElementById("removeGroupsBtn").addEventListener("click", function () {
                moveSelectedGroups(assignedGroups, availableGroups, false);
            });

            function moveSelectedGroups(sourceList, targetList, isAdding) {
                const selectedItems = sourceList.querySelectorAll("input:checked");
                selectedItems.forEach(item => {
                    let listItem = item.closest("li");
                    item.checked = false;

                    if (isAdding) {
                        item.classList.add("assigned-group-checkbox");
                        item.name = "SelectedGroupIds";
                        item.checked = true;
                    } else {
                        item.classList.remove("assigned-group-checkbox");
                        item.removeAttribute("name");
                    }

                    targetList.appendChild(listItem);
                });
                updateProjectLeads();
            }

            function updateProjectLeads() {
                projectLeadSelect.innerHTML = '<option value="">Select a Lead</option>';
                let selectedGroupIds = Array.from(assignedGroups.querySelectorAll(".assigned-group-checkbox"))
                    .map(item => item.value);

                if (selectedGroupIds.length === 0) {
                    return;
                }

                fetch(`/Project/GetGroupLeads?groupIds=${selectedGroupIds.join(',')}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.length === 0) {
                            console.warn("No leads found for the selected groups.");
                        }

                        data.forEach(lead => {
                            let option = document.createElement("option");
                            option.value = lead.id;
                            option.textContent = lead.fullName;
                            if (lead.id == document.getElementById("hiddenProjectLeadId").value) {
                                option.selected = true;
                            }
                            projectLeadSelect.appendChild(option);
                        });
                    })
                    .catch(error => console.error("Error fetching leads:", error));
            }

            document.getElementById("projectLead").addEventListener("change", function () {
                document.getElementById("hiddenProjectLeadId").value = this.value;
            });

            updateProjectLeads();

            document.querySelector("form").addEventListener("submit", function (e) {
                const projectLeadId = document.getElementById("projectLead").value;
                const hiddenLeadId = document.getElementById("hiddenProjectLeadId").value;

                if (projectLeadId !== hiddenLeadId) {
                    document.getElementById("LeadChangeRequired").value = "true";
                }
            });

            document.getElementById("projectForm").addEventListener("submit", function () {
                document.querySelectorAll("#assignedGroups li").forEach(li => {
                    let checkbox = li.querySelector("input[type='checkbox']");
                    if (!checkbox) return;

                    if (!checkbox.checked) {
                        let hiddenInput = document.createElement("input");
                        hiddenInput.type = "hidden";
                        hiddenInput.name = "SelectedGroupIds";
                        hiddenInput.value = checkbox.value;
                        this.appendChild(hiddenInput);
                    }
                });
            });

        });
    </script>
}
